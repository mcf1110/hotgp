{-# LANGUAGE GADTs #-}

module Evolution.Config where

import qualified Data.Map as M
import Evolution.Core (Depth)
import Evolution.SamplerTable (SamplerTable)
import Grammar (GType, ProgramType, Tree)

type Evaluations = Int

data Config a where
  MkConfig ::
    Ord a =>
    { -- | The input and output type of the desired program
      _programType :: !ProgramType,
      -- | How to sample from terminals and operations for full
      _fullTable :: !SamplerTable,
      -- | How to sample from terminals and operations for grow
      _growTable :: !SamplerTable,
      -- | The max depth of any tree
      _maxTreeDepth :: !Depth,
      -- | The max depth of a subtree that is generated by the mutation operator
      _maxMutationTreeDepth :: !Depth,
      -- | The max depth of any tree
      _maxInitialDepth :: !Depth,
      -- | The number of trees in the population
      _popSize :: Int,
      -- | How many individuals we generate for each steady-state step
      _individualsPerStep :: Int,
      -- | For how long the program should run
      _nEvaluations :: Evaluations,
      -- | How to evaluate each tree
      _fitnessFunction :: Tree -> a,
      -- | How much probability we keep for each rank position
      _parentScalar :: Double,
      -- | The probability of doing a crossover
      _crossoverRate :: Double
    } ->
    Config a
